{
  "hash": "01436d50a9a45aeda3e12add1d402e2b",
  "result": {
    "markdown": "---\ntitle: \"Analysing Strava data in R.\"\nauthor: \"Luke Ashton\"\ndate: \"2023-12-29\"\nimage: images/combined_plot.png\n\nbibliography: references.bib\ncategories:\n- R\n- Data analysis\n- Tutorial\n- Strava\n- Sports statistics\n\ndescription: 'A former runner wrangles data through the Strava API.'\ngoogle-scholar: true\ncitation: true\n\nexecute: \n  warning: false\n---\n\n\n## Introduction\n\nWith most of Australia closed between Christmas and New Years, I've found myself with some free time. This time for reflection has allowed me to consider potential goals for the coming year and, more importantly, my blas√© attitude towards my physical health in the past year. ^[or perhaps the past few years...]\n\nI've always enjoyed having some physical goals for the year ahead, and some recent family health problems have reminded me of significance of prioritising one's physical health.   \n\nHowever, before setting specific goals I like to review my past training to help me understand where to start and how to map out the process of getting into better shape. \n\nSo, being the nerd that I am, I thought it would be fun to pull my running data from Strava using their API. Before getting started with this mini-project, I noticed that there wasn't a clear pathway for R-users to obtain activity-level data from the Strava API in bulk - so hopefully this is useful to someone at some point! I am also somewhat underwhelmed by the analytic capabilities of the Strava app - especially if someone doesn't want to pay $15/month in subscription fees!\n\n## Inspiration\n\nBefore moving forward I want to acknowledge that part of my motivation for re-engaging with the Strava API comes from [Ilya Kashnitsky's](https://ikashnitsky.phd/) beautiful heatmap, pictured below. He created it by taking aggregate-level polylines from each of his activities and plotting them on an inset map - pretty cool and the code for it can be found [here](https://github.com/ikashnitsky/30DayMapChallenge/blob/main/src/20-outdoors-strava.R)!   \n\n![A really cool colour-inverted heatmap from Ilya's Strava runs!](images/ikashnitsky_strava_map.png)\n\n## Loading libraries and registering for the API\n\nBack to the task at hand, though! First, we'll need to load the following libraries which will form the foundation for most of our wrangling and analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A gentle reminder to call install.packages(\"package_name_here\") if you don't have any of these installed already!\n\nlibrary(tidyverse)\nlibrary(rStrava) \nlibrary(patchwork)\n```\n:::\n\n\n\nNow, to access the Strava API. For this, you will need to register for this 'service' [here](https://www.strava.com/settings/api) [^1].\n\n[^1]: This assumes that you already have a Strava account.\n\nOnce you've done this, you will be prompted to name your app and to provide a website URL for it. For the URL, I just used my Strava athlete profile [^2]. After inputting this information, you should be directed to a page with your 'client id' and your 'client secret' - these are both necessary for accessing the API and, Strava reminds you, shouldn't be shared with anyone!\n\n[^2]: I assume this is a requirement intended for the more serious app developers, rather than the hobbyist analysts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp_name <- \"Put your app name here\"\nclient_id <- \"Put your client id here\"\nclient_secret <- \"Put your client secret here\"\n```\n:::\n\n\n\n\nThen, with this information we can create an API request! I'll first create an object that we can call any time we need to make a request.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstoken <- httr::config(\n  token = strava_oauth(\n    app_name, \n    client_id, \n    client_secret, \n    app_scope = \"activity:read_all\",\n    cache = TRUE)\n  )\n```\n:::\n\n\n\n## Aggregated activity data\n\nHowever, one limitation of the standard API and the RStrava package is that most of the simpler functions only provide aggregated activity data. For instance, the following code creates an activity list with some topline stats from the 412 activities I've logged with Strava. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nactivity.list <- stoken %>%\n  get_activity_list() %>%\n  compile_activities()\n\nhead(activity.list)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"achievement_count\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"athlete.id\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"athlete.resource_state\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"athlete_count\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"average_speed\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"comment_count\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"commute\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"display_hide_heartrate_option\"],\"name\":[8],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"distance\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"elapsed_time\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"elev_high\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"elev_low\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"end_latlng1\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"end_latlng2\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"external_id\"],\"name\":[15],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"flagged\"],\"name\":[16],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"from_accepted_tag\"],\"name\":[17],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"gear_id\"],\"name\":[18],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"has_heartrate\"],\"name\":[19],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"has_kudoed\"],\"name\":[20],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"heartrate_opt_out\"],\"name\":[21],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"id\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"kudos_count\"],\"name\":[23],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"location_country\"],\"name\":[24],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"manual\"],\"name\":[25],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"map.id\"],\"name\":[26],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"map.resource_state\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"map.summary_polyline\"],\"name\":[28],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"max_speed\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"moving_time\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"name\"],\"name\":[31],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"photo_count\"],\"name\":[32],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"pr_count\"],\"name\":[33],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"private\"],\"name\":[34],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"resource_state\"],\"name\":[35],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sport_type\"],\"name\":[36],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"start_date\"],\"name\":[37],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"start_date_local\"],\"name\":[38],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"start_latlng1\"],\"name\":[39],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"start_latlng2\"],\"name\":[40],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"timezone\"],\"name\":[41],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"total_elevation_gain\"],\"name\":[42],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"total_photo_count\"],\"name\":[43],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"trainer\"],\"name\":[44],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[45],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"upload_id\"],\"name\":[46],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"upload_id_str\"],\"name\":[47],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"utc_offset\"],\"name\":[48],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"visibility\"],\"name\":[49],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"average_cadence\"],\"name\":[50],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"average_heartrate\"],\"name\":[51],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"average_temp\"],\"name\":[52],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"average_watts\"],\"name\":[53],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"device_watts\"],\"name\":[54],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"kilojoules\"],\"name\":[55],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"max_heartrate\"],\"name\":[56],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"workout_type\"],\"name\":[57],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"0\",\"2\":\"31921497\",\"3\":\"1\",\"4\":\"1\",\"5\":\"4.4424\",\"6\":\"0\",\"7\":\"FALSE\",\"8\":\"FALSE\",\"9\":\"3.3523\",\"10\":\"2767\",\"11\":\"126.5\",\"12\":\"85.3\",\"13\":\"-33.71870\",\"14\":\"151.1500\",\"15\":\"97FC79F1-0AF9-408C-8620-E057A55327E5-activity.fit\",\"16\":\"FALSE\",\"17\":\"FALSE\",\"18\":\"g14059828\",\"19\":\"FALSE\",\"20\":\"FALSE\",\"21\":\"FALSE\",\"22\":\"10448718656\",\"23\":\"0\",\"24\":\"Australia\",\"25\":\"FALSE\",\"26\":\"a10448718656\",\"27\":\"2\",\"28\":\"htxlEonpy[@FB?BBJGR@d@Wn@?BEB@HI@IKIO@GCIO@KCSISIE[KK@KEE@]IMKIAAEG?MIQAECWQ?KMSEQEc@CEA_@@G?KCG@ESk@C_@CCGMIGM?IEOOGAW]YSIUICKKMGe@CI@UE?CA?CGEAGOYMSACBUBSTGAIHM?OKGQWc@MGSSG?CEM]?]Oc@UIQCIKGKUKQAECI?ACICUOo@HIE_@FKEQ?E@MAIC_@q@IAAGEAKAYNK@KFUDK?C@I@GBUOU?EIa@CECG@_@GIBG?MEKK]CGEU@OE_@CGBMA_@DOAIE?IKI?EGGKIE?CGIAe@DWAo@NIHWB_@VG@UJOCK@e@GICIICYI[CAWCQGQBO@UKIASDSE_@?M@MFM?MGQAKGI@EEUC?AC@GCBDLDFJ^FBBB?^NB?BGZSLAZ@LKJC\\\\\\\\JPJNAPDJEFBLPFJ@NFHBAPHP?FHNFFANOT@NABENC\\\\\\\\MVQR?TQVAFBLJPHDFd@VP?DCNBTCV@L?RHDBZ@HLLGP?JFD?L@^PJCHDHJJ@RCXBPEPMj@GLL\\\\\\\\DRRDPD?HN@AFDHCNORGTBNAf@LN@PHNLNBBCHFD@VPLPTBTZNn@@VLLJDh@t@PJPXHBP?JGPODOHGRGLHVZ?DHHPLPCTBVJDHB?LLRJHPRLBHLPJBNPFBNLN\\\\\\\\?LHd@@XDJBf@ADF^BHBBJTD@RIXN@@NBTLDARJVDJHNBVHHFFNAPHVJNTJ@FEFG@W@KAIFQBOJS@KE\",\"29\":\"10.6740\",\"30\":\"2717\",\"31\":\"COVID walk with Nani\",\"32\":\"0\",\"33\":\"0\",\"34\":\"FALSE\",\"35\":\"2\",\"36\":\"Walk\",\"37\":\"2023-12-28T06:56:34Z\",\"38\":\"2023-12-28T17:56:34Z\",\"39\":\"-33.71860\",\"40\":\"151.1500\",\"41\":\"(GMT+10:00) Australia/Sydney\",\"42\":\"54.4\",\"43\":\"0\",\"44\":\"FALSE\",\"45\":\"Walk\",\"46\":\"11182369841\",\"47\":\"11182369841\",\"48\":\"39600\",\"49\":\"everyone\",\"50\":\"NA\",\"51\":\"NA\",\"52\":\"NA\",\"53\":\"NA\",\"54\":\"NA\",\"55\":\"NA\",\"56\":\"NA\",\"57\":\"NA\",\"_rn_\":\"1\"},{\"1\":\"4\",\"2\":\"31921497\",\"3\":\"1\",\"4\":\"1\",\"5\":\"10.1556\",\"6\":\"0\",\"7\":\"FALSE\",\"8\":\"FALSE\",\"9\":\"10.0859\",\"10\":\"3601\",\"11\":\"169.7\",\"12\":\"85.3\",\"13\":\"-33.71714\",\"14\":\"151.1527\",\"15\":\"AAF9D3E6-421B-4D8F-9E07-7C7748812273-activity.fit\",\"16\":\"FALSE\",\"17\":\"FALSE\",\"18\":\"g14059828\",\"19\":\"FALSE\",\"20\":\"FALSE\",\"21\":\"FALSE\",\"22\":\"10436921535\",\"23\":\"0\",\"24\":\"Australia\",\"25\":\"FALSE\",\"26\":\"a10436921535\",\"27\":\"2\",\"28\":\"`uxlEsnpy[LD^En@S\\\\\\\\?HMCKi@[GQEYGKo@Yc@IcA]c@WSQOe@EcAOiAMUYQiBaBa@Qi@Aq@o@KGQAOB]\\\\\\\\OBMEc@k@{@{@KOGc@Uc@QOOE[Y_@K[Ui@O_ABu@HSIWe@UOa@CWFUPk@?aA]S@yAYuACo@SWA[Qg@OeAZOBSHa@DOJa@F[?gA_@Qi@MQUC[Be@EsAL_@AYA_@Qi@EkAU]Wm@SIIi@w@}@wBa@UGKEe@@YE]UGQBKJKTq@`@_@HcCQMECEM_@Gg@Uq@UUOEe@A[E[a@a@[s@uAIQBGn@RXf@HBXRh@HrAE`A\\\\\\\\R?XMVEd@[j@Un@g@HSTO^Gf@DLE`A?fBNvBFvBx@lATRHL?\\\\\\\\Pr@z@z@R~@Jd@CRGLS@k@DUNqD?UFi@B_ADUAq@ESKOs@c@[w@eBqAWQIA_Aw@{@cBOQIUKu@i@m@QYm@sAc@e@o@c@qAoAa@Q]WY_@iAg@{Cg@wCu@_AKmC?sDa@kB@qBWWBm@E[B}@GgAOqAc@m@Ia@Qm@KsAk@i@[iB_@[Ea@UQE_AISMKWXXbAN~@X`AHlA`@nAl@v@Rv@f@b@Bd@LNLHh@@r@Av@w@`HCtAC^CFGY?e@RcBBaAVmAFkBHc@@c@DUFIf@@h@EdANt@A|AHf@A`@HnAJZ?`@FrADh@Hp@BzA?v@Fl@Tt@HbDx@n@JdAb@x@v@VLjAdAl@^lAxAVp@f@|@n@dBdA~ARLNT^JXd@b@Xh@Vh@n@l@Vl@j@JVKfC@NSdBKrAEvAMVi@LmAGq@Oc@Q]k@MMu@Mq@[uBs@c@EkDEoAQaAC_@Nu@p@}@`@]Fq@V[V[FGC_@[MEY?aAJQCc@Wm@q@SIYC@Nl@bAx@bANJv@DRNb@f@J`@Fh@FTLJTLvABVIh@a@\\\\\\\\e@JEb@?XZHn@DHVf@b@b@l@bABTh@~@LLb@Pn@`@hATdA^`@@rAO`@Fv@?LLPf@FFrARd@En@OPMj@Kv@Eh@PVRt@Cd@B^Ar@LZNrAFj@L\\\\\\\\CLBn@KXALDDHb@\\\\\\\\FLPFpAO^Dp@Xn@d@TFb@TV\\\\\\\\BNTl@JHjApAXFp@[\\\\\\\\B~@p@RH`@BVV\",\"29\":\"15.6744\",\"30\":\"3575\",\"31\":\"Aaaand I have COVID\",\"32\":\"0\",\"33\":\"1\",\"34\":\"FALSE\",\"35\":\"2\",\"36\":\"TrailRun\",\"37\":\"2023-12-26T03:20:44Z\",\"38\":\"2023-12-26T14:20:44Z\",\"39\":\"-33.71872\",\"40\":\"151.1500\",\"41\":\"(GMT+10:00) Australia/Sydney\",\"42\":\"154.1\",\"43\":\"0\",\"44\":\"FALSE\",\"45\":\"Run\",\"46\":\"11170114338\",\"47\":\"11170114338\",\"48\":\"39600\",\"49\":\"everyone\",\"50\":\"NA\",\"51\":\"NA\",\"52\":\"NA\",\"53\":\"NA\",\"54\":\"NA\",\"55\":\"NA\",\"56\":\"NA\",\"57\":\"0\",\"_rn_\":\"2\"},{\"1\":\"0\",\"2\":\"31921497\",\"3\":\"1\",\"4\":\"1\",\"5\":\"8.8884\",\"6\":\"0\",\"7\":\"FALSE\",\"8\":\"FALSE\",\"9\":\"1.0023\",\"10\":\"448\",\"11\":\"118.0\",\"12\":\"85.3\",\"13\":\"-33.71783\",\"14\":\"151.1520\",\"15\":\"9ED2688F-655C-4F5C-B731-26A44FF4C922-activity.fit\",\"16\":\"FALSE\",\"17\":\"FALSE\",\"18\":\"g14059828\",\"19\":\"FALSE\",\"20\":\"FALSE\",\"21\":\"FALSE\",\"22\":\"10432812925\",\"23\":\"0\",\"24\":\"Australia\",\"25\":\"FALSE\",\"26\":\"a10432812925\",\"27\":\"2\",\"28\":\"j{vlEelqy[F@FMN?DB`@LJEl@i@TANGHIHE\\\\\\\\?`@IN?VHn@h@F@rAKH@DB\\\\\\\\B`@Hr@FRJp@HLDL@n@Tf@WJONGHDBAJBh@v@PPF@TIZGf@GP?PDj@XF?TPN@`@ZTJNNLRNn@TZj@h@HTNNJFJ?HAROLQj@Bj@t@TFf@@JDfAhAd@XLNPVL`@\",\"29\":\"16.6068\",\"30\":\"406\",\"31\":\"Afternoon Trail Run\",\"32\":\"0\",\"33\":\"0\",\"34\":\"FALSE\",\"35\":\"2\",\"36\":\"TrailRun\",\"37\":\"2023-12-25T03:56:58Z\",\"38\":\"2023-12-25T14:56:58Z\",\"39\":\"-33.70950\",\"40\":\"151.1548\",\"41\":\"(GMT+10:00) Australia/Sydney\",\"42\":\"35.2\",\"43\":\"0\",\"44\":\"FALSE\",\"45\":\"Run\",\"46\":\"11165803755\",\"47\":\"11165803755\",\"48\":\"39600\",\"49\":\"everyone\",\"50\":\"NA\",\"51\":\"NA\",\"52\":\"NA\",\"53\":\"NA\",\"54\":\"NA\",\"55\":\"NA\",\"56\":\"NA\",\"57\":\"0\",\"_rn_\":\"3\"},{\"1\":\"0\",\"2\":\"31921497\",\"3\":\"1\",\"4\":\"1\",\"5\":\"12.5352\",\"6\":\"0\",\"7\":\"FALSE\",\"8\":\"FALSE\",\"9\":\"3.0675\",\"10\":\"881\",\"11\":\"126.5\",\"12\":\"85.3\",\"13\":\"-33.70805\",\"14\":\"151.1553\",\"15\":\"C64E3F45-3D44-47F6-8184-9A9E5FA2D42A-activity.fit\",\"16\":\"FALSE\",\"17\":\"FALSE\",\"18\":\"g14059828\",\"19\":\"FALSE\",\"20\":\"FALSE\",\"21\":\"FALSE\",\"22\":\"10432803321\",\"23\":\"0\",\"24\":\"Australia\",\"25\":\"FALSE\",\"26\":\"a10432803321\",\"27\":\"2\",\"28\":\"luxlEanpy[ZAj@[f@CDE?Kg@UMq@IKMAa@Um@Si@WWEYKWUKiAA_@Ik@Qm@m@y@OMc@UYWWQkAK[c@e@WS?_@`@QBQAGEUa@e@m@OIQQIs@QYiAw@]Ks@a@WA[Aa@BYLM@QIS[[SE@QEe@HQFQ@_@EW?[OUC_@?a@Ic@OSCO@YA_AO[Aa@SSEy@Bc@REAYDa@Vg@LUC{@SWMCEAUEOa@KOAYB_@CWD[Ae@F{@AKIi@Si@aAqBoBQi@AM@SGWMQQMG[Q]Qw@EY@i@?EHQJMCGGCUE[?[HYFKD[Hm@f@g@T}@?KEQYO_@EYe@g@e@K_@DSDy@?c@_@OYc@YG?MGf@hAJF\\\\\\\\b@TPPVLFVFd@D`@ZDJJ`@Hl@B\\\\\\\\@DDBPFj@J\\\\\\\\CPBRCTKLOJGh@q@ZKTBHFLVHf@JXLLRLJLn@xBP`@TZt@`@`AVRJbARL?\",\"29\":\"18.4032\",\"30\":\"881\",\"31\":\"Afternoon Trail Run\",\"32\":\"0\",\"33\":\"0\",\"34\":\"FALSE\",\"35\":\"2\",\"36\":\"TrailRun\",\"37\":\"2023-12-25T03:39:49Z\",\"38\":\"2023-12-25T14:39:49Z\",\"39\":\"-33.71879\",\"40\":\"151.1499\",\"41\":\"(GMT+10:00) Australia/Sydney\",\"42\":\"39.8\",\"43\":\"0\",\"44\":\"FALSE\",\"45\":\"Run\",\"46\":\"11165793337\",\"47\":\"11165793337\",\"48\":\"39600\",\"49\":\"everyone\",\"50\":\"NA\",\"51\":\"NA\",\"52\":\"NA\",\"53\":\"NA\",\"54\":\"NA\",\"55\":\"NA\",\"56\":\"NA\",\"57\":\"0\",\"_rn_\":\"4\"},{\"1\":\"0\",\"2\":\"31921497\",\"3\":\"1\",\"4\":\"1\",\"5\":\"2.9988\",\"6\":\"0\",\"7\":\"FALSE\",\"8\":\"FALSE\",\"9\":\"12.0000\",\"10\":\"14400\",\"11\":\"NA\",\"12\":\"NA\",\"13\":\"NA\",\"14\":\"NA\",\"15\":\"NA\",\"16\":\"FALSE\",\"17\":\"FALSE\",\"18\":\"g14059828\",\"19\":\"FALSE\",\"20\":\"FALSE\",\"21\":\"FALSE\",\"22\":\"10432438711\",\"23\":\"0\",\"24\":\"Australia\",\"25\":\"TRUE\",\"26\":\"a10432438711\",\"27\":\"2\",\"28\":\"\",\"29\":\"0.0000\",\"30\":\"14400\",\"31\":\"Walk around the city w/ Ari & Shreedhar\",\"32\":\"0\",\"33\":\"0\",\"34\":\"FALSE\",\"35\":\"2\",\"36\":\"Walk\",\"37\":\"2023-12-24T02:00:00Z\",\"38\":\"2023-12-24T13:00:00Z\",\"39\":\"NA\",\"40\":\"NA\",\"41\":\"(GMT+10:00) Australia/Sydney\",\"42\":\"100.0\",\"43\":\"0\",\"44\":\"FALSE\",\"45\":\"Walk\",\"46\":\"NA\",\"47\":\"NA\",\"48\":\"39600\",\"49\":\"everyone\",\"50\":\"NA\",\"51\":\"NA\",\"52\":\"NA\",\"53\":\"NA\",\"54\":\"NA\",\"55\":\"NA\",\"56\":\"NA\",\"57\":\"NA\",\"_rn_\":\"5\"},{\"1\":\"0\",\"2\":\"31921497\",\"3\":\"1\",\"4\":\"1\",\"5\":\"2.8008\",\"6\":\"0\",\"7\":\"FALSE\",\"8\":\"FALSE\",\"9\":\"14.0000\",\"10\":\"18000\",\"11\":\"NA\",\"12\":\"NA\",\"13\":\"NA\",\"14\":\"NA\",\"15\":\"NA\",\"16\":\"FALSE\",\"17\":\"FALSE\",\"18\":\"g14059828\",\"19\":\"FALSE\",\"20\":\"FALSE\",\"21\":\"FALSE\",\"22\":\"10432437449\",\"23\":\"0\",\"24\":\"Australia\",\"25\":\"TRUE\",\"26\":\"a10432437449\",\"27\":\"2\",\"28\":\"\",\"29\":\"0.0000\",\"30\":\"18000\",\"31\":\"Hike w/ Ari, Claire, and Shreedhar @ RNP\",\"32\":\"0\",\"33\":\"0\",\"34\":\"FALSE\",\"35\":\"2\",\"36\":\"Hike\",\"37\":\"2023-12-23T00:30:00Z\",\"38\":\"2023-12-23T11:30:00Z\",\"39\":\"NA\",\"40\":\"NA\",\"41\":\"(GMT+10:00) Australia/Sydney\",\"42\":\"300.0\",\"43\":\"0\",\"44\":\"FALSE\",\"45\":\"Hike\",\"46\":\"NA\",\"47\":\"NA\",\"48\":\"39600\",\"49\":\"everyone\",\"50\":\"NA\",\"51\":\"NA\",\"52\":\"NA\",\"53\":\"NA\",\"54\":\"NA\",\"55\":\"NA\",\"56\":\"NA\",\"57\":\"NA\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWhile it's interesting to see items like the achievement count, average speed, and average heart rate for each activity, this information may not help us get an accurate measure of training load. One of the more well-known measures of training load is the TRIMP (training impulse) value, which estimates training load by multiplying the number of minutes the activity took by the average heart rate during it. \n\nTo get a better intuition for why I believe activity-level data to be important for measuring training load, consider two workouts: one a high-intensity sprint session focusing on 400m intervals with a long recovery; the other a typical easy 'Zone 2' aerobic workout. These two workouts could, in theory, be of the same duration, cover the same amount of distance, and even end up having similar average heart rates - but their training effects, and subsequently the toll they take on the body, are markedly different. \n\nTherefore, I want activity-level data - which is typically collected at the interval of 1 second from most sports watches. \n\n## Activity-level data\n\nFortunately, there's a command that allows us to access this information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_streams(stoken,\n            id = \"activity id here\")\n```\n:::\n\n\nHowever, getting the data for each of the 412 activities I have on Strava using this process would take some time. So, let's automate it!\n\nFirst, let's create a smaller version of the dataset to make sure that we don't have any errors before bombarding the API with bad requests.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A smaller version of our dataset\n\nmini <- head(activity.list, 5)\n\n# Run a function from rows 1:5 of the mini dataframe, using the activity 'id' column as our index. \n\ndata <- lapply(1:nrow(mini), function(i) {\n  \n  temp <- get_streams(stoken, id = mini$id[i])\n  \n})\n```\n:::\n\n\nFortunately we did this with a smaller dataset, because - using my data, at least - there's already an error!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nError in get_streams(stoken, id = mini$id[i]) : Not Found (HTTP 404).\n```\n:::\n\n\nA problem with this function is that there's no way to know which of the 5 activities we requested caused this problem. Although, this provides us with the opportunity to use a command that I've found myself relying on a lot lately: `tryCatch()`. This function allows for two main possibilities:\n\n1.  The omission of data causing an error, allowing the command to run without halting.\n2.  Understanding which cases are causing the problem.\n\nIn this instance, I want to understand what's going wrong with the non-functional 'id' variables to make sure that there aren't problems in the future and to prevent sending a tonne of bad requests to the API.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- lapply(1:nrow(mini), function(i) {\n\n  # 'tries' to run this function\n    \n  tryCatch({\n    \n    temp <- get_streams(stoken, id = mini$id[i])\n    \n  },\n  \n  # if an error occurs, provides the following output\n  \n  error = function(error) {\n    \n    cat(\"Error at index:\", i, \"\\n\")\n    cat(\"Error message:\", conditionMessage(error), \"\\n\")\n    return(NULL)  \n    \n  }\n  )\n}) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nError at index: 5 \nError message: Not Found (HTTP 404). \n```\n:::\n:::\n\n\nOutstanding! We now have the data from the first four activities, but we're also able to see that activity 5 in this dataframe is causing the error. A brief inspection shows that the error is likely due to these activities being manually uploaded - a symptom of a broken Garmin watch, and missing several key variables of importance!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at a valid row (4) and an invalid row (5)\n\nmini[c(4,5),] %>%\n  select(id, manual, max_speed, start_latlng1)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"id\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"manual\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"max_speed\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"start_latlng1\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"10432803321\",\"2\":\"FALSE\",\"3\":\"18.4032\",\"4\":\"-33.71879\",\"_rn_\":\"4\"},{\"1\":\"10432438711\",\"2\":\"TRUE\",\"3\":\"0.0000\",\"4\":\"NA\",\"_rn_\":\"5\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nTo confirm this hypothesis, we can run the function over some manually uploaded activities to see if any of them are able to produce a valid result.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmanual_test <- activity.list %>%\n  filter(manual == \"TRUE\") %>%\n  head(., 5)\n\ndata <- lapply(1:nrow(manual_test), function(i) {\n  \n  tryCatch({\n    \n    temp <- get_streams(stoken, id = manual_test$id[i])\n    \n  },\n  \n  error = function(error) {\n    \n    paste(\"Error at index:\", i, \"\\n\")\n    paste(\"Error message:\", conditionMessage(error), \"\\n\")\n    return(NULL)  \n    \n  }\n  )\n}) %>%\n  bind_rows()\n\nhead(data)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[],\"data\":[],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n<br>\n\nNot a single valid result. Well, at least that was an easy fix! Now, let's create a dataframe which omits these activities, and to be proactive let's remove activities without a set of latitude/longitude coordinates and heart rate data (as we might want to explore these later on), and any activities that aren't runs.^[It appears that I have a few cross country ski activities and hikes in here!]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nactivities <- activity.list %>%\n  filter(manual != \"TRUE\") %>%\n  filter(!is.na(start_latlng1),\n         !is.na(max_heartrate)) %>%\n  filter(grepl(\"Run\", sport_type))\n\nmini.1 <- head(activities, 5)\n\n# Run a function from rows 1:5 of the mini dataframe, using the activity 'id' column as our index. \n\ndata <- lapply(1:nrow(mini.1), function(i) {\n  \n  temp <- get_streams(stoken, id = mini.1$id[i])\n  \n})\n```\n:::\n\n\n## Wrangling and tidying the data\n\nWe have now - in theory - some working code to pull activity-level data from Strava's API. Let's see what one of the elements from our dataset looks like.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- get_streams(stoken, id = mini.1$id[1])\n\nsummary(temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Length Class  Mode\n [1,] 5      -none- list\n [2,] 5      -none- list\n [3,] 5      -none- list\n [4,] 5      -none- list\n [5,] 5      -none- list\n [6,] 5      -none- list\n [7,] 5      -none- list\n [8,] 5      -none- list\n [9,] 5      -none- list\n[10,] 5      -none- list\n```\n:::\n:::\n\n\nHmmm - that's not a particularly nice structure for analysis, so let's tidy it up a little. First, we'll transpose the set of lists and convert them to a tibble. ^[I'm going to call each library in this tidying step, as we'll be incorporating this code into a bigger function later on.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp %>%\n  purrr::transpose() %>%\n  tibble::as_tibble()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"type\"],\"name\":[1],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"data\"],\"name\":[2],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"series_type\"],\"name\":[3],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"original_size\"],\"name\":[4],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"resolution\"],\"name\":[5],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"<chr [1]>\",\"2\":\"<list [1,604]>\",\"3\":\"<chr [1]>\",\"4\":\"<int [1]>\",\"5\":\"<chr [1]>\"},{\"1\":\"<chr [1]>\",\"2\":\"<list [1,604]>\",\"3\":\"<chr [1]>\",\"4\":\"<int [1]>\",\"5\":\"<chr [1]>\"},{\"1\":\"<chr [1]>\",\"2\":\"<list [1,604]>\",\"3\":\"<chr [1]>\",\"4\":\"<int [1]>\",\"5\":\"<chr [1]>\"},{\"1\":\"<chr [1]>\",\"2\":\"<list [1,604]>\",\"3\":\"<chr [1]>\",\"4\":\"<int [1]>\",\"5\":\"<chr [1]>\"},{\"1\":\"<chr [1]>\",\"2\":\"<list [1,604]>\",\"3\":\"<chr [1]>\",\"4\":\"<int [1]>\",\"5\":\"<chr [1]>\"},{\"1\":\"<chr [1]>\",\"2\":\"<list [1,604]>\",\"3\":\"<chr [1]>\",\"4\":\"<int [1]>\",\"5\":\"<chr [1]>\"},{\"1\":\"<chr [1]>\",\"2\":\"<list [1,604]>\",\"3\":\"<chr [1]>\",\"4\":\"<int [1]>\",\"5\":\"<chr [1]>\"},{\"1\":\"<chr [1]>\",\"2\":\"<list [1,604]>\",\"3\":\"<chr [1]>\",\"4\":\"<int [1]>\",\"5\":\"<chr [1]>\"},{\"1\":\"<chr [1]>\",\"2\":\"<list [1,604]>\",\"3\":\"<chr [1]>\",\"4\":\"<int [1]>\",\"5\":\"<chr [1]>\"},{\"1\":\"<chr [1]>\",\"2\":\"<list [1,604]>\",\"3\":\"<chr [1]>\",\"4\":\"<int [1]>\",\"5\":\"<chr [1]>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nThat's a bit better, now at least we can begin to work with this data! The next step is keep the 'type' and 'data' columns and remove everything else, then we should `unlist` the data and convert 0-length lists to NA values. After this, we can perform some more tidying and add some important variables to make these activities identifiable in the future.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp.data <- temp %>%\n  purrr::transpose() %>%\n  tibble::as_tibble() %>%\n  dplyr::select(type, data) %>%\n  dplyr::mutate(type = unlist(type),\n                data = purrr::map(data, ~ purrr::modify_if(.x, ~length(.) == 0, ~NA))) %>%\n  \n  # With the data wrangled, let's transform it into a tidy format!\n  \n  tidyr::spread(data = ., key = type, value = data) %>%\n  tidyr::unnest(cols = everything()) %>%\n  dplyr::mutate_at(vars(-latlng), ~ unlist(.)) %>%\n  tidyr::unnest_wider(latlng, names_sep = \"_\") %>%\n  dplyr::mutate(activity = 1,\n                id = mini$id[1])\n\nhead(temp.data)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"altitude\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cadence\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"distance\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"grade_smooth\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"heartrate\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"latlng_1\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"latlng_2\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"moving\"],\"name\":[8],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"temp\"],\"name\":[9],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"time\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"velocity_smooth\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"activity\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"id\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"52.2\",\"2\":\"53\",\"3\":\"0.0\",\"4\":\"0.0\",\"5\":\"106\",\"6\":\"-33.76342\",\"7\":\"151.1133\",\"8\":\"FALSE\",\"9\":\"20\",\"10\":\"0\",\"11\":\"0.000\",\"12\":\"1\",\"13\":\"10448718656\"},{\"1\":\"52.2\",\"2\":\"53\",\"3\":\"3.6\",\"4\":\"0.0\",\"5\":\"105\",\"6\":\"-33.76344\",\"7\":\"151.1133\",\"8\":\"TRUE\",\"9\":\"20\",\"10\":\"1\",\"11\":\"0.000\",\"12\":\"1\",\"13\":\"10448718656\"},{\"1\":\"52.2\",\"2\":\"53\",\"3\":\"5.9\",\"4\":\"3.3\",\"5\":\"105\",\"6\":\"-33.76346\",\"7\":\"151.1132\",\"8\":\"TRUE\",\"9\":\"20\",\"10\":\"2\",\"11\":\"2.975\",\"12\":\"1\",\"13\":\"10448718656\"},{\"1\":\"52.2\",\"2\":\"83\",\"3\":\"9.1\",\"4\":\"5.2\",\"5\":\"104\",\"6\":\"-33.76347\",\"7\":\"151.1132\",\"8\":\"TRUE\",\"9\":\"20\",\"10\":\"3\",\"11\":\"3.030\",\"12\":\"1\",\"13\":\"10448718656\"},{\"1\":\"52.6\",\"2\":\"84\",\"3\":\"12.2\",\"4\":\"11.4\",\"5\":\"105\",\"6\":\"-33.76349\",\"7\":\"151.1132\",\"8\":\"TRUE\",\"9\":\"20\",\"10\":\"4\",\"11\":\"3.050\",\"12\":\"1\",\"13\":\"10448718656\"},{\"1\":\"52.8\",\"2\":\"83\",\"3\":\"15.2\",\"4\":\"15.2\",\"5\":\"107\",\"6\":\"-33.76351\",\"7\":\"151.1132\",\"8\":\"TRUE\",\"9\":\"20\",\"10\":\"5\",\"11\":\"3.038\",\"12\":\"1\",\"13\":\"10448718656\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nPerfect! We now have that all-important heart rate data, along with a few other useful variables for some later analysis!\n\n## API Request limits\n\nWe're almost there, we just need to ask the API for this data and combine it. However, the next problem we face comes from Strava's API architecture:\n\n![API Request limits can be a problem when you don't pay-to-play.](images/request_limits_ugh.png)\n\nAfter filtering my activities, I still have to make 308 requests through the API, which means that we'll have to create a function which knows to stop sending requests for a 15-minute period once we approach that 200 request limit, and once that time has passed can resume with the remaining requests.\n\nIdeally, this function would be able to work with a request of any number of items, not just my 308. I've created something that should work for this task using a modulus operator and a `Sys.sleep` command. If you're going to run it yourself, be mindful that this function will take 15 minutes per 180 activities[^4]!\n\n[^4]: I use 180 requests instead of 200 to allow for some wiggle room, in case you need to make some changes to your code, or want to make another small request.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First, create an empty list that will store each request\nresult_list <- list()\nbatches <- (nrow(activities) %/% 180) + 1\ncases_per_batch <- nrow(activities) / batches\n\n\nfor (i in 1:nrow(activities)) {\n  Sys.sleep(if (i %% cases_per_batch == 1 & \n                i > 1) 900 else 0)\n\n  temp <- get_streams(stoken, activities$id[i])\n\n  data <- temp %>%\n    purrr::transpose() %>%\n    tibble::as_tibble() %>%\n    dplyr::select(type, data) %>%\n    dplyr::mutate(type = unlist(type),\n                  data = purrr::map(data, ~replace(.x, length(.x) == 0, NA))) %>%\n    tidyr::spread(data = ., key = type, value = data) %>%\n    tidyr::unnest(cols = everything()) %>%\n    dplyr::mutate_at(vars(-latlng), ~ unlist(.)) %>%\n    tidyr::unnest_wider(latlng, names_sep = \"_\") %>%\n    dplyr::mutate(activity = i,\n                  id = activities$id[i])\n  \n  result_list[[i]] <- data\n}\n\ndf <- result_list %>%\n  bind_rows() \n\n# Now, I'm going to save this dataset, so I don't have to run this call again and waste 16 minutes of my life!\n# save(df, file = \"data/all_activities.RData\")\n```\n:::\n\n\n\n\n## Creating a measure of training load!\n\nFor quantifying training load, let's use a modified version of the Training Impulse (TRIMP) formula [see @morton1990modeling]. This version incorporates an individual weighting factor and accounts for different resting and maximum heart rates. It also has a non-linear term to try to capture the phenomena that higher heart rates are more fatiguing / indicative of a higher training load.  \n\nAlso, as mentioned before, rather than use the average heart rate method, we'll create a measure for each observation of heart rate data. This means that we will need to create a few new variables in our dataset.\n\n- the change in time between observations - (d.time)\n- the athlete's resting and maximum heart rates\n- the specific heart rate reserve (HRR) for each heart rate measure ^[This can be calculated using the following formula: $$ ((heart\\:rate - resting\\:heart\\:rate) / (max\\:heart\\:rate - resting\\:heart\\:rate)) $$]\n- the TRIMP value for each heart rate observation, converted to a value per minute ^[This can be calculated using the following formula: $$ TRIMP = (d.time / 60) * HRR * (0.64e ^{1.92 * HRR} ) $$] \n- some values for day, week, month, and year \n\nWe can also use the activity 'id' variable to include some of the aggregated data for each activity.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select aggregated activity variables\n\nactivity.variables <- activity.list %>%\n  select(id, total_elevation_gain, \n         activity_distance = distance,\n         average_speed, max_speed,\n         date = start_date_local)\n\ndf1 <- df %>%\n  arrange(activity, time) %>%\n  left_join(activity.variables) %>%\n  group_by(activity) %>%\n  dplyr::mutate(activity_time = max(time),\n                d.time = time - dplyr::lag(time),\n                d.time = ifelse(is.na(d.time), 0, d.time),\n                rest_hr = 55,\n                max_hr = 190,\n                HRR = ((heartrate - rest_hr) / (max_hr - rest_hr)),\n                TRIMP = (d.time / 60) * HRR * (0.64*exp(1))^(1.92 * HRR),\n                TRIMP_session = sum(TRIMP, na.rm = T),\n                year = year(as.POSIXct(date)),\n                month = month(as.POSIXct(date)),\n                day = weekdays(as.POSIXct(date)),\n                week = isoweek(ymd_hms(date)))\n```\n:::\n\n\n## Plotting our data\n\nFirst, let's create a modified version of the dataset to provide some general insights. Now that we have a more accurate version of activity-level training load, we can re-aggregate the data for plotting. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotting_data <- df1 %>%\n  select(activity, date, activity_distance, \n         average_speed, max_speed, activity_time, \n         TRIMP_session, year, month, day, week) %>%\n  unique()\n```\n:::\n\n\n\nOkay, now let's create a plot to look at our training load over the years we have data available for. This will allow us to assess our consistency and see trends in our training. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotting_data %>%\n  group_by(year, week) %>%\n  dplyr::summarise(weekly_TRIMP = sum(TRIMP_session, na.rm = T)) %>%\n\n    \n  ggplot(aes(x = week, y = weekly_TRIMP, fill = factor(year))) + \n  geom_col() + \n  scale_fill_manual(values = ggokabeito::palette_okabe_ito()) + \n  theme_minimal()  +\n  theme(\n    legend.position = \"none\",\n    legend.title = element_blank()\n  ) + \n  labs(title = \"Weekly training load (TRIMPexp) over the years\",\n       x = \"Week of the year\",\n       y = \"Weekly training load\") + \n  facet_wrap(~ year, ncol = 1, scales = \"fixed\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nWell, that's not great... where's 2020 and 2022? In my defence, I did run throughout the back half of 2023 but didn't record these sessions because my Garmin watch broke, and I haven't gotten around to having it fixed yet. So that's a good lesson: you can't analyse or evaluate data that you don't have! \n\nPerhaps, it would be more useful to look at the data from 2018 and the start of 2019, where I was somewhat more consistent with my training. First, let's re-plot the weekly training load data from 2018 and 2019, and then we can look at the average speed of all workouts each week during this time period, too. It might also be fun to use a slightly different 'geom' for each plot.   \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_trimp <- plotting_data %>%\n  filter(year == 2018 | \n           year == 2019) %>%\n  group_by(year, week) %>%\n  dplyr::summarise(weekly_TRIMP = sum(TRIMP_session, na.rm = T)) %>%\n  ungroup() %>%\n\n    \n  ggplot(aes(x = week, y = weekly_TRIMP, fill = factor(year))) + \n  geom_col() + \n  scale_fill_manual(values = ggokabeito::palette_okabe_ito(c(1,2))) + \n  coord_cartesian(xlim = c(0, 52)) + \n  theme_minimal()  +\n  theme(\n    legend.position = \"none\",\n    legend.title = element_blank()\n  ) + \n  labs(title = \"Weekly TRIMP across 2018 and 2019\",\n       x = \"Week of the year\",\n       y = \"Weekly training load\") + \n  facet_wrap(~ year)\n\nplot_trimp\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_speed <- plotting_data %>%\n  filter(year == 2018 | \n           year == 2019) %>%\n  group_by(year, week) %>%\n  dplyr::summarise(weekly_TRIMP = sum(TRIMP_session, na.rm = T),\n                   average_speed = mean(average_speed, na.rm = T)) %>%\n  ungroup() %>%\n\n    \n  ggplot(aes(x = week, y = average_speed, colour = factor(year))) + \n  geom_point() + \n  scale_colour_manual(values = ggokabeito::palette_okabe_ito(c(1,2))) + \n  coord_cartesian(xlim = c(0, 52)) + \n  theme_minimal()  +\n  theme(\n    legend.position = \"none\",\n    legend.title = element_blank()\n  ) + \n  labs(title = \"Average weekly speed of runs across 2018 and 2019\",\n  x = \"Week of the year\",\n  y = \"Weekly average speed (km/h)\") +\n  facet_wrap(~ year)\n\nplot_speed\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nIt looks like there's a relationship between consistent training and the average weekly speed of workouts. Hmmmm, who would have thought? However, to make this a little bit clearer we can plot these two figures together using the `patchwork` library. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_plot <- plot_trimp + plot_speed + plot_layout(ncol = 1)\n\ncombined_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Let's save this to use as the image for the post! \n\n# ggsave(combined_plot, file = \"images/combined_plot.png\",\n#        height = 6, width = 8, units = \"in\")\n```\n:::\n\n\n\nNot bad. While there's plenty more analysis to undertake, this post is already much longer than anticipated due to the intricacies of working with the Strava API, so I think I'll leave it here for now and dive into this data in more detail later. \n\n## Takeaways & goals for the New Year\n\nSo, it's clear that I've been terribly inconsistent with my aerobic training. However, I don't record data for my resistance training anymore, so there's no way to tell how inconsistent I've been with that. Although, I've probably been training with weights, on average, twice per week for the past few years.\n\nFor 2024, I have ideas of an ironman distance triathlon and my first 100 miler run floating around in my mind, but let's start with the basics: consistency. Perhaps 3 resistance training sessions per week and building up to a few hours of aerobic training each week across some runs, a cycle, and a swim.  ",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}